package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/vrypan/fcp/utils"
)

var FCP_VERSION string

func main() {
	Execute()
}

// cliCmd represents the cli command
var rootCmd = &cobra.Command{
	Use:   "fcp-inspect <file>",
	Short: "Inspect binary files generated by fcp",
	Long: `
Inspect a data file generated by fcp.

  This will print out the contents of the file in json format:
  fcp-inspect localfile.data

  And this will print out only stats about the file:
  fcp-inspect localfile.data --stats
`,
	Run: fcpCmdMain,
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}
func fcpCmdMain(cmd *cobra.Command, args []string) {
	version, _ := cmd.Flags().GetBool("version")
	if version {
		fmt.Println(FCP_VERSION)
		return
	}
	if len(args) == 0 {
		cmd.Help()
		return
	}
	opts := map[string]any{}
	opts["stats"], _ = cmd.Flags().GetBool("stats")
	opts["reactions"], _ = cmd.Flags().GetBool("reactions")
	opts["links"], _ = cmd.Flags().GetBool("links")
	opts["casts"], _ = cmd.Flags().GetBool("casts")
	utils.Inspect(args[0], opts)
	return
}
func init() {
	//rootCmd.AddCommand(fcpCmd)
	rootCmd.Flags().BoolP("stats", "s", false, "Display stats")
	rootCmd.Flags().Bool("casts", true, "Read/write casts")
	rootCmd.Flags().Bool("reactions", true, "Read/write reactions (likes, recasts)")
	rootCmd.Flags().Bool("links", true, "Read/write links (follows)")
	rootCmd.Flags().BoolP("version", "v", false, "Display fcp version")
}
