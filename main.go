/*
Copyright Â© 2025 NAME HERE <EMAIL ADDRESS>
*/
package main

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/vrypan/fckup/utils"
)

var FCP_VERSION string

func main() {
	Execute()
}

// cliCmd represents the cli command
var rootCmd = &cobra.Command{
	Use:   "fcp <source> <destination>",
	Short: "Copy user data from/to farcaster and the local filesystem",
	Long: `Copy user data from/to farcaster and the local filesystem.

Examples:
  Copy fname's casts, reactions and links from your hub to
  a local file:
  fcp fc://hubble.local:2283/fname localfile.data

  Upload the local file to your hub:
  fcp localfile.data fc://hubble.local:2283
  (Will probably fail because the messages already exist)

  Use fc+ssl if the hub is using SSL:
  fcp fc+ssl://hubble.local:2283/fname localfile.data

  When uploading data, you can use a new signer to resign all messages:
  fcp local.data fc+ssl://hubble.local:2283/fname --app-key=0x...

Use -i to inspect a data file generated by fcp.

  This will print out the contents of the file as json:
  fcp -i localfile.data

  And this will print out only stats about the file:
  fcp -i localfile.data --stats
`,
	Run: fcpCmdMain,
}

func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}
func fcpCmdMain(cmd *cobra.Command, args []string) {
	inspect, _ := cmd.Flags().GetBool("inspect")
	if inspect {
		opts := map[string]any{}
		opts["stats"], _ = cmd.Flags().GetBool("stats")
		utils.Inspect(args[0], opts)
		return
	}
	version, _ := cmd.Flags().GetBool("version")
	if version {
		fmt.Printf("fcp version %s\n", FCP_VERSION)
		return
	}
	if len(args) != 2 {
		cmd.Help()
		return
	}
	hubAddress, useSsl, username, err := utils.ParseUrl(args[0])
	if err != nil {
		fmt.Printf("Error parsing URL: %v\n", err)
		return
	}

	if hubAddress == "" { // source is local file
		hubAddress, useSsl, username, err = utils.ParseUrl(args[1])
		if err != nil {
			fmt.Printf("Error parsing URL: %v\n", err)
			return
		}
		if hubAddress == "" {
			fmt.Printf("No hub address specified\n")
			return
		}
		opts := map[string]any{}
		opts["ssl"] = useSsl
		opts["signer"], _ = cmd.Flags().GetString("app-key")
		utils.Upload(hubAddress, args[0], opts)
	} else {
		if h, _, _, err := utils.ParseUrl(args[1]); h != "" || err != nil {
			fmt.Println("Invalid destination")
			return
		}
		opts := map[string]any{}
		opts["ssl"] = useSsl
		utils.Download(hubAddress, username[1:], args[1], opts)
	}

}
func init() {
	//rootCmd.AddCommand(fcpCmd)
	rootCmd.Flags().Uint32("page-size", 100, "Hub request page size")
	rootCmd.Flags().StringP("app-key", "k", "", "App key (signer)")
	rootCmd.Flags().BoolP("inspect", "i", false, "Inspect a local fcp file")
	rootCmd.Flags().BoolP("stats", "s", false, "Display stats")
	rootCmd.Flags().BoolP("version", "v", false, "Display fcp version")
}
